name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "main", "dev", "**" ]

jobs:
  lint-format-tidy-codeql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format clang-tidy cppcheck

      - name: Check formatting with clang-format
        run: |
          find . -regex '.*\.\(c\|h\)' -print0 | xargs -0 clang-format -i --style=file
          git diff --exit-code

      - name: Perform static analysis with clang-tidy
        run: |
          mkdir ${{ steps.strings.outputs.build-output-dir }}
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DCMAKE_BUILD_TYPE=Release -S ${{ github.workspace }}
          find src/ -regex '.*\.\(c\|h\)' -print0 | xargs -0 clang-tidy -p ${{ steps.strings.outputs.build-output-dir }}

      - name: Lint with cppcheck
        run: ./scripts/lint.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:cpp"

  build-test-debian:
    runs-on: ubuntu-latest
    needs: lint-format-tidy-codeql
    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=g++
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Release
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config Release
