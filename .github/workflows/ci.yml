name: Main Build

on:
  push:
    branches: [ "main", "dev" ]

jobs:
  build-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, windows-2019, windows-2022, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: macos-latest
            c_compiler: clang
            build_dir: build
          - os: ubuntu-latest
            c_compiler: gcc
            build_dir: build
          - os: ubuntu-20.04
            c_compiler: gcc
            build_dir: build
          - os: windows-2019
            c_compiler: cl
            build_dir: build
          - os: windows-2022
            c_compiler: cl
            build_dir: build
        exclude:
          - os: ubuntu-latest
            c_compiler: cl # Not available through setup-cpp in this workflow
          - os: ubuntu-20.04
            c_compiler: cl # Not available through setup-cpp in this workflow
          - os: macos-latest
            c_compiler: cl # Not available through setup-cpp in this workflow

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/${{ matrix.build_dir }}" >> "$GITHUB_OUTPUT"
        echo "workspace=${{ github.workspace }}" >> "$GITHUB_OUTPUT"

    - name: Install cmocka (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcmocka-dev

    - name: Install cmocka (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install cmocka

    - uses: aminya/setup-cpp@v1
      if: runner.os == 'Windows'
      with:
        vcpkg: true
        cmake: true
        ccache: true
        ninja: false
        vs: true # only need to add Visual Studio when using cl.exe
        msvc: latest
        vcpkg-rev: master # to use the latest version of vcpkg

    - name: Cache vcpkg and build
      if: runner.os == 'Windows'
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/vcpkg
          ${{ env.VCPKG_ROOT }}
          ${{ steps.strings.outputs.build-output-dir }}
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/CMakeLists.txt', '**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Clean Build Directory (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        rm -rf "${{ steps.strings.outputs.build-output-dir }}"

    - name: Configure CMake (Windows cl)
      if: runner.os == 'Windows' && matrix.c_compiler == 'cl'
      shell: bash
      run: |
        cmake -G "Visual Studio 17 2022" -A x64 -B "${{ steps.strings.outputs.build-output-dir }}" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S "${{ steps.strings.outputs.workspace }}"

    - name: Configure CMake (Not Windows)
      if: runner.os != 'Windows'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

    - name: Build (Not Windows)
      if: runner.os != 'Windows'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Test (Not Windows)
      if: runner.os != 'Windows'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
