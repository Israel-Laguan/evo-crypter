name: evo-crypter CI

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev", "**" ] # Trigger on PRs to any branch

jobs:
  build-matrix:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, windows-2019, windows-2022, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            build_dir: build
          - os: ubuntu-20.04
            c_compiler: gcc
            build_dir: build
          - os: windows-2019
            c_compiler: cl
            build_dir: build
          - os: windows-2022
            c_compiler: cl
            build_dir: build
          - os: macos-latest
            c_compiler: clang
            build_dir: build
        exclude:
          - os: windows-2019
            c_compiler: gcc
          - os: windows-2019
            c_compiler: clang
          - os: windows-2022
            c_compiler: gcc
          - os: windows-2022
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-20.04
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/${{ matrix.build_dir }}" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck

    - name: Install pthreads4w (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $pthreads4w_version = "3.0.0"
        $pthreads4w_url = "https://github.com/win-pthread/win-pthread/archive/refs/tags/v${pthreads4w_version}.zip"
        $pthreads4w_extract_dir = "${{ runner.temp }}/pthreads4w"
        $pthreads4w_install_dir = "C:/pthreads4w"

        # Download pthreads4w
        Write-Host "Downloading pthreads4w from: ${pthreads4w_url}"
        curl -L "${pthreads4w_url}" -o "${{ runner.temp }}/pthreads4w.zip"

        # Extract pthreads4w
        mkdir "$pthreads4w_extract_dir"
        tar -xf "${{ runner.temp }}/pthreads4w.zip" -C "$pthreads4w_extract_dir"

        # Find the actual include and lib directories
        $include_dir = Get-ChildItem -Path "$pthreads4w_extract_dir" -Directory -Recurse | Where-Object {$_.Name -eq "include"} | Select-Object -First 1 -ExpandProperty FullName
        $lib_dir = Get-ChildItem -Path "$pthreads4w_extract_dir" -Directory -Recurse | Where-Object {$_.Name -eq "lib"} | Select-Object -First 1 -ExpandProperty FullName

        # Install pthreads4w to a system-wide location
        if (-Not (Test-Path -Path $pthreads4w_install_dir)) {
          mkdir $pthreads4w_install_dir
        }
        Copy-Item -Path "$include_dir\*" -Destination "$pthreads4w_install_dir\include" -Recurse
        Copy-Item -Path "$lib_dir\*" -Destination "$pthreads4w_install_dir\lib" -Recurse

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
      env:
        PTHREADS4W_INCLUDE_DIR: C:/pthreads4w/include
        PTHREADS4W_LIBRARY: C:/pthreads4w/lib

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

  build-test-lint-debian:
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=g++
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Release
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config Release

      - name: Lint
        run: ./scripts/lint.sh

  codeql-analysis:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
